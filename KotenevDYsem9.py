import pandas as pd
import matplotlib.pyplot as mpl

# Загрузка и предварительная обработка
# 1. Загрузите базу данных из файла Titanic.csv
old_df = pd.read_csv("Titanic.csv")
# 2.Загрузите базу данных ещё раз, но так, чтобы столбец PassengerId был идентификатором, то есть номером строки (index)
df = pd.read_csv("Titanic.csv", index_col=0)
# 3. Удалите из базы строки с пропущенными значениями ии сохраните изменения в самой базе
df = df.dropna()

# Описание базы данных
# 4. Выведите сводную информацию по базе данных: какие переменные в ней есть, какого они типа + сколько заполненных
# наблюдений в каждом столбце
df.info()
# 5. Выведите сводную статистическую информацию по каждому количественному показателю в базе данных (описательные
# статистики)
print(df.describe())
# 6. Постройте гистограмму для переменной Возраст (Age), сделайте её красного цвета, подпишите оси и добавьте заголовок
# графика
mpl.hist(df['Age'], color='red')
mpl.title('Age histogram')
mpl.xlabel('Age')
mpl.ylabel('Frequency')
mpl.show()
# 7. Выведите описательные статистики для столбца Стоимость билета (Fare)
print(df['Fare'])

# Работа со строками и столбцами базы
# 8. Выведите названия стобцов в базе данных в виде списка (объект типа list)
print(list(df.columns))
# 9. Переименуйте столбец с классом пассажира из Pclass в Class
ncol = list(df.columns)
ncol[1] = 'Class'
df.columns = ncol
print(list(df.columns))
# 10. Выберите из базы данных все строки, которые соответствуют пассажирам женского пола, и сохраните их в новую базу
# female
female = df[df['Sex'] == 'female']
print(female)
# 11. Выберите из базы данных все строки, которые соответствуют выжившим пассажирам мужского пола младше 32 лет, и
# сохраните их в базу Ymale
Ymale = df[(df['Survived'] == 1) & (df['Sex'] == 'male') & (df['Age'] < 32)]
print(Ymale)
# 12. Выберите из базы данных все строки, которые соответствуют пассажирам 1 или 2 класса
print(df[(df['Class'] == 1) | (df['Class'] == 2)])
# 13. Выберите из базы данных все строки, которые соответствуют выжившим пассажирам 1 или 2 класса
print(df[(df['Survived'] == 1) & ((df['Class'] == 1) | (df['Class'] == 2))])
# 14. Добавьте в датафрейм столбец Female, состоящий из значений 0 и 1, где один соответствует пассажирам женского пола
df['Female'] = [1 if x == 'female' else 0 for x in df['Sex']]  # или вот такой вариант:
# df['Female'] = df['Sex'].map({'male': 0, 'female': 1}) это я скорее для себя оставил)
print(df[['Sex', 'Female']])

# Группировка
# 15. Выведите на экран все уникальные значения в столбце Embarked
print(df['Embarked'].unique())
# 16. Сгруппируйте строки в датафрейме в соответствии со значениями переменной Survived и выведите средние значения
# всех количественных переменных по группам
print(df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1).groupby('Survived').mean())
# так как посчитать среднее значение от слов или символов нельзя, то следует их исключить (параметр axis определяет по
# какой оси происходит удаление 0 - строка, 1 - столбец), номер билета я тоже не посчитал нужным считать (что нам даст
# среднее значение?)
# 17. Сгруппируйте строки в датафрейме в соответствии со значениями переменной Sex и сохраните в отдельный датафрейм
# таблицу со средними и медианными значениями переменной Age по группам (мужчины и женщины)
group_df = df.groupby('Sex')['Age'].agg(['mean', 'median'])
print(group_df)


# Выгрузка базы в файл
# 18. Приведите все названия столбцов в датафрейме к нижнему регистру и сохраните изменения
def rename_cols(df):
    oldnames = list(df.columns)
    newnames = [i.lower() for i in oldnames]
    df.columns = newnames
    return df


df = rename_cols(df)
print(df.head(3))
# 19. Выгрузите итоговый датафрейм в файл Titanic-new.csv
df.to_csv('Titanic-new.csv', index=False)
